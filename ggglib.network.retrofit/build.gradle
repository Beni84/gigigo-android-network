
apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.Gigigo-Android-Devs'

android {
  compileSdkVersion parent.ext.androidCompileSdkVersion
  buildToolsVersion parent.ext.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion parent.ext.androidMinSdkVersion
    targetSdkVersion parent.ext.androidTargetSdkVersion

    versionCode generateAutoVersionCode()
    versionName generateVersionName(1,0,0)
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    abortOnError false
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }
}

dependencies {
  compile (parent.ext.libraries.retrofit) {
    exclude group: 'com.squareup.okhttp3', module: 'okhttp'
  }
  compile parent.ext.libraries.gsonConverter

  compile parent.ext.modules.gggLibNetwork

  testCompile parent.ext.testLibraries.junit
  testCompile parent.ext.testLibraries.mockito
  testCompile parent.ext.testLibraries.mockWebServer
}

// build a jar with source files
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

afterEvaluate {
  javadoc.classpath +=
      files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files
      })
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}